apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ .Values.rbac.serviceName }} # jenkins-stage-admin
rules:
  - apiGroups: [""]
    resources: ["*"]
    verbs: ["*"]

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Values.serviceAccount.serviceName }} # jenkins-stage-admin
  namespace: {{ .Values.namespace.ns }} # staging-service

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ .Values.rolebinding.name }} # jenkins-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ .Values.roleRef.name }} # jenkins-stage-admin
subjects:
- kind: ServiceAccount
  name: {{ .Values.subjects.name }} # jenkins-stage-admin
  namespace: {{ .Values.namespace.ns }} # staging-service

---

apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.secrets.secretName }} # jenkins-stage-secret
  annotations:
    kubernetes.io/service-account.name: {{ .Values.secrets.annotations }} # jenkins-stage-admin
type: kubernetes.io/service-account-token

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Values.persistenceclaim.name }} # jenkins-stage-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.persistenceclaim.storage }} # 100Gi

---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: {{ .Values.persistencevolume.name }} # jenkins-stage-pv-volume
  labels:
    type: {{ .Values.persistencevolume.type }} # local
spec:
  capacity:
    storage: {{ .Values.persistencevolume.storage }} # 100Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: {{ .Values.persistencevolume.hostpath }} # "/jenkins"

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.statefulset.name }} # jenkins
spec:
  replicas: {{ .Values.statefulset.replicas }} # 1
  selector:
    matchLabels:
      app: {{ .Values.statefulset.applabels }} # jenkins
  template:
    metadata:
      labels:
        app: {{ .Values.statefulset.applabels }} # jenkins
    spec:
      nodeName: {{ .Values.statefulset.nodename }}
      securityContext:
        fsGroup: {{ .Values.statefulset.fsgroup }} # 1000
        runAsUser: {{ .Values.statefulset.runasuser }} #1000
      serviceAccountName: {{ .Values.statefulset.serviceaccountname }} # jenkins-stage-admin
      containers:
      - name: {{ .Values.statefulset.containername }} # jenkins
        image: {{ .Values.statefulset.image }} # jenkins/jenkins:2.452.2-lts
        ports:
          - name: {{ .Values.controllerports.name }} # http-port
            containerPort: {{ .Values.controllerports.controllercontainerport }} # 80
          - name: {{ .Values.jnlpports.name }} # jnlp-port
            containerPort: {{ .Values.jnlpports.jnlpcontainerport }} # 50000
        volumeMounts:
          - name: {{ .Values.volumemounts.name }} # jenkins-home
            mountPath: {{ .Values.volumemounts.mountpath }} # /var/jenkins_home
      volumes:
        - name: {{ .Values.volumes.name }} # jenkins-home
          persistentVolumeClaim:
            claimName: {{ .Values.persistenceclaim.name }} # jenkins-stage-pv-claim

---

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.clusterip.name }} # jenkins-stage-clusterip-service
  labels:
    app: {{ .Values.clusterip.applabels }} # jenkins
spec:
  type: {{ .Values.clusterip.type }} # ClusterIP
  selector:
    app: {{ .Values.clusterip.applabels }} # jenkins
  ports:
    - name: {{ .Values.controllerports.name }} # http-port
      port: {{ .Values.controllerports.controllercontainerport }} # 80
      protocol: {{ .Values.serviceports.protocol }} # TCP
      targetPort: {{ .Values.serviceports.targetport }} # 8080
    - name: {{ .Values.jnlpports.name }} # jnlp-port
      port: {{ .Values.jnlpports.jnlpcontainerport }} # 50000
      protocol: {{ .Values.jnlpserviceports.protocol }} # TCP
      targetPort: {{ .Values.jnlpserviceports.targetport }} # 50000

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Values.ingress.name }} # jenkins-stage-ingress-service
  annotations:
    cert-manager.io/cluster-issuer: {{ .Values.ingress.issuer }} # letsencrypt
spec:
  ingressClassName: {{ .Values.ingress.classname }} # nginx
  rules:
  - host: {{ .Values.ingress.host }} # jenkins-stage.datacloudstack.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: {{ .Values.clusterip.name }} # jenkins-clusterip-service
            port:
              number: {{ .Values.controllerports.controllercontainerport }} # 80
  tls:
  - hosts:
    - {{ .Values.ingress.host }} # jenkins-stage.datacloudstack.com
    secretName: {{ .Values.ingress.secretname }} # jenkins-stage-datacloudstack-secret
